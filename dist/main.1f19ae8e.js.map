{"version":3,"sources":["main.js"],"names":["div","dom","create","console","log","after","test","div3","wrap","nodes","empty","window","attr","title","text","style","border","color","class","add","remove","has","fn","on","off","testDiv","find","test2","parent","s2","siblings","next","previous","t","each","children","n","index"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["// document.createElement('div')等同于下面两行，可以少写很多字母\r\n//const div = dom.create('div');\r\n//const span = dom.create('span')\r\n// div.appendChild(span);  //加入span\r\nconst div = dom.create(\"<div>newDiv</div>\"); //但是有bug，将内容改成<td>hi</td>,就出现undefine\r\nconsole.log(div);  //因为这里没有引入div，所以需要去html做把JS引入进来\r\n\r\ndom.after(test,div);\r\n\r\nconst div3 = dom.create('<div id = \"parent\"> </div>') //创建div3\r\ndom.wrap(test, div3) //把div3包到test外面\r\n\r\nconst nodes = dom.empty(window.empty)\r\nconsole.log(nodes)\r\n\r\ndom.attr(test,'title','hi,I am XX') //attr是attribute缩写,改属性名\r\nconst title = dom.attr(test, 'title') //用attr这个属性获取这个title这个的属性，test,'title'属性放在const title变量里面\r\nconsole.log(`title:${title}`)//这里的``是tap上面的符号\r\n\r\ndom.text(test,'你好，这是新的内容') //设置div的文本内容为这个\r\ndom.text(test)\r\n\r\ndom.style(test, {border:'1px solid red',color:'blue'}) //有一个对象，key的节点是它的属性名和属性值\r\nconsole.log(dom.style(test, 'border'))//参数两个，有可能设置，也有可能是读取\r\ndom.style(test, 'border', '1px solid black')// 参数是三个的，就是设置\r\n\r\ndom.class.add(test, 'red')//dom上面有个class，上面添加一个red\r\ndom.class.add(test, 'blue')\r\ndom.class.remove(test, 'blue') //删除掉这个红色\r\nconsole.log(dom.class.has(test, 'blue')) //查是否有蓝色这个颜色\r\n\r\n//test.addEventListener('click')原本要写这么长，改成如下写法\r\nconst fn = () =>{\r\n    console.log('点击了')\r\n}\r\ndom.on(test, 'click', fn) //用于添加事件监听\r\ndom.off(test, 'click', fn) //用于删除事件监听\r\n\r\n\r\nconst testDiv = dom.find('#test')[0]  //不获取第0个，会是个数组，而不是div;这里是引号''\r\n// dom.find('.red', testDiv)  //这样就默认再test2里面找，而不是再test里面找了，testDiv是指定找的范围是什么\r\nconsole.log(testDiv)\r\nconst test2 = dom.find('#test2')[0]\r\nconsole.log(dom.find('.red', test2)[0])//这里获取到的是多个节点，所以要加个0\r\n\r\nconsole.log(dom.parent(test))  //查找这个test的爸爸，就是空的div\r\n\r\nconst s2 = dom.find('#s2')[0]\r\nconsole.log(dom.siblings(s2))//找到s2的所有兄弟姐妹的节点\r\nconsole.log(dom.next(s2))  //查找s2的下一个节点,但是这样会出现回车，所有dom.js要加是否循环\r\nconsole.log(dom.previous(s2))  //查找s2的上一个节点\r\n\r\nconst t = dom.find('#travel')[0]  //遍历的元素是t,没加0，返回的就是一个数组\r\ndom.each(dom.children(t), (n) => dom.style(n,'color','red'))//遍历t的每一个子元素,对应每个元素进行站位n，每一个元素的颜色变成红色\r\n\r\nconsole.log(dom.index(s2))  //查找s2排行第几"]}